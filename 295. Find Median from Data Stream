/*
295. Find Median from Data Stream
Hard

Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.

For example,
[2,3,4], the median is 3

[2,3], the median is (2 + 3) / 2 = 2.5

Design a data structure that supports the following two operations:

void addNum(int num) - Add a integer number from the data stream to the data structure.
double findMedian() - Return the median of all elements so far.
 

Example:

addNum(1)
addNum(2)
findMedian() -> 1.5
addNum(3) 
findMedian() -> 2
 

Follow up:

If all integer numbers from the stream are between 0 and 100, how would you optimize it?
If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?
*/
================================================================================================

class MedianFinder {
public:
    /** initialize your data structure here. */
    multiset<int> data;
    multiset<int> :: iterator it1, it2;
    int size = 0;
    
    MedianFinder() {
        ios::sync_with_stdio(false);
    }
    
    void addNum(int num) {
        data.insert(num);
        size = data.size();
        if(size == 1){
            it1 = data.begin();
            it2 = data.begin();
        }
        else{
            if(size & 1){ //  convert even to odd          
                if(num >= *it2 ){
                    ++it1;
                    it2 = it1; // to make sure things sort out when duplicates come in.
                }
                else if(num <= *it1) {
                    --it2;
                    it1 = it2;
                }
                else{
                    ++it1;
                    --it2;
                }
            }
            else{ // converting odd to even.
                if(num >= *it1){
                    it2++;
                }
                else if (num < *it1){
                    it1--;
                }
            }
        }
        
        
    }
    
    double findMedian() {        
        //cout<<"*it1: "<<*(it1)<<" *it2: "<<*(it2)<<endl;
        return (*it1 + *it2)/2.0;
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
