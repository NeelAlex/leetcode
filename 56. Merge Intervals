/*
56. Merge Intervals
Medium

Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

*/

===================================================================

class Solution {
public:
     static bool condi( pair<int, int> a,  pair<int, int> b){
        return (a.first < b.first);
    }
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        ios::sync_with_stdio(false);
        vector<pair<int, int> > input;
        vector<vector<int> > result;
        if(intervals.size() == 0){
            return result;
        }
        for(int i=0; i< intervals.size(); i++){
            pair<int, int> p;
            p.first = intervals[i][0];
            p.second = intervals[i][1];
            input.push_back(p);
        }
        sort(input.begin(), input.end(), condi);
        pair<int, int> smallResult = input[0];
        int flag = 0;
        for(int i=1;i<input.size(); i++){
            if(input[i].first <= smallResult.second){
                smallResult.second = max(smallResult.second, input[i].second);
                flag = 1;
            }
            else{
                vector<int> sr;
                sr.push_back(smallResult.first);
                sr.push_back(smallResult.second);
                result.push_back(sr);
                smallResult = input[i];
                flag = 0;
            }
        }
            vector<int> sr;
            sr.push_back(smallResult.first);
            sr.push_back(smallResult.second);
            result.push_back(sr);
        return result;
    }
};
